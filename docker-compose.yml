services:
  router1:
    build:
      context: .
      dockerfile: router/Dockerfile
    environment:
      - vizinhos=[router5, 172.20.5.3, 1],[router2, 172.20.2.3, 1]
      - my_ip=172.20.1.3
      - my_name=router1
    networks:
      subnet_5:
        ipv4_address: 172.20.5.2
      subnet_2:
        ipv4_address: 172.20.2.4
      subnet_1:
        ipv4_address: 172.20.1.3
    cap_add:
      - NET_ADMIN
    command: /bin/bash -c "ip route del default && python router.py"
  host1a:
    build:
      context: .
      dockerfile: host/Dockerfile
    environment:
      - my_name=host1a
    networks:
      subnet_1:
        ipv4_address: 172.20.1.10
    depends_on:
      - router1
    command: /bin/bash -c "ip route del default && ip route add default via 172.20.1.3 dev eth0 && python main.py"
    cap_add:
      - NET_ADMIN
  host1b:
    build:
      context: .
      dockerfile: host/Dockerfile
    environment:
      - my_name=host1b
    networks:
      subnet_1:
        ipv4_address: 172.20.1.11
    depends_on:
      - router1
    command: /bin/bash -c "ip route del default && ip route add default via 172.20.1.3 dev eth0 && python main.py"
    cap_add:
      - NET_ADMIN
  router2:
    build:
      context: .
      dockerfile: router/Dockerfile
    environment:
      - vizinhos=[router1, 172.20.1.3, 1],[router3, 172.20.3.3, 1]
      - my_ip=172.20.2.3
      - my_name=router2
    networks:
      subnet_1:
        ipv4_address: 172.20.1.2
      subnet_3:
        ipv4_address: 172.20.3.4
      subnet_2:
        ipv4_address: 172.20.2.3
    cap_add:
      - NET_ADMIN
    command: /bin/bash -c "ip route del default && python router.py"
  host2a:
    build:
      context: .
      dockerfile: host/Dockerfile
    environment:
      - my_name=host2a
    networks:
      subnet_2:
        ipv4_address: 172.20.2.10
    depends_on:
      - router2
    command: /bin/bash -c "ip route del default && ip route add default via 172.20.2.3 dev eth0 && python main.py"
    cap_add:
      - NET_ADMIN
  host2b:
    build:
      context: .
      dockerfile: host/Dockerfile
    environment:
      - my_name=host2b
    networks:
      subnet_2:
        ipv4_address: 172.20.2.11
    depends_on:
      - router2
    command: /bin/bash -c "ip route del default && ip route add default via 172.20.2.3 dev eth0 && python main.py"
    cap_add:
      - NET_ADMIN
  router3:
    build:
      context: .
      dockerfile: router/Dockerfile
    environment:
      - vizinhos=[router2, 172.20.2.3, 1],[router4, 172.20.4.3, 1]
      - my_ip=172.20.3.3
      - my_name=router3
    networks:
      subnet_2:
        ipv4_address: 172.20.2.2
      subnet_4:
        ipv4_address: 172.20.4.4
      subnet_3:
        ipv4_address: 172.20.3.3
    cap_add:
      - NET_ADMIN
    command: /bin/bash -c "ip route del default && python router.py"
  host3a:
    build:
      context: .
      dockerfile: host/Dockerfile
    environment:
      - my_name=host3a
    networks:
      subnet_3:
        ipv4_address: 172.20.3.10
    depends_on:
      - router3
    command: /bin/bash -c "ip route del default && ip route add default via 172.20.3.3 dev eth0 && python main.py"
    cap_add:
      - NET_ADMIN
  host3b:
    build:
      context: .
      dockerfile: host/Dockerfile
    environment:
      - my_name=host3b
    networks:
      subnet_3:
        ipv4_address: 172.20.3.11
    depends_on:
      - router3
    command: /bin/bash -c "ip route del default && ip route add default via 172.20.3.3 dev eth0 && python main.py"
    cap_add:
      - NET_ADMIN
  router4:
    build:
      context: .
      dockerfile: router/Dockerfile
    environment:
      - vizinhos=[router3, 172.20.3.3, 1],[router5, 172.20.5.3, 1]
      - my_ip=172.20.4.3
      - my_name=router4
    networks:
      subnet_3:
        ipv4_address: 172.20.3.2
      subnet_5:
        ipv4_address: 172.20.5.4
      subnet_4:
        ipv4_address: 172.20.4.3
    cap_add:
      - NET_ADMIN
    command: /bin/bash -c "ip route del default && python router.py"
  host4a:
    build:
      context: .
      dockerfile: host/Dockerfile
    environment:
      - my_name=host4a
    networks:
      subnet_4:
        ipv4_address: 172.20.4.10
    depends_on:
      - router4
    command: /bin/bash -c "ip route del default && ip route add default via 172.20.4.3 dev eth0 && python main.py"
    cap_add:
      - NET_ADMIN
  host4b:
    build:
      context: .
      dockerfile: host/Dockerfile
    environment:
      - my_name=host4b
    networks:
      subnet_4:
        ipv4_address: 172.20.4.11
    depends_on:
      - router4
    command: /bin/bash -c "ip route del default && ip route add default via 172.20.4.3 dev eth0 && python main.py"
    cap_add:
      - NET_ADMIN
  router5:
    build:
      context: .
      dockerfile: router/Dockerfile
    environment:
      - vizinhos=[router1, 172.20.1.3, 1],[router4, 172.20.4.3, 1]
      - my_ip=172.20.5.3
      - my_name=router5
    networks:
      subnet_1:
        ipv4_address: 172.20.1.4
      subnet_4:
        ipv4_address: 172.20.4.2
      subnet_5:
        ipv4_address: 172.20.5.3
    cap_add:
      - NET_ADMIN
    command: /bin/bash -c "ip route del default && python router.py"
  host5a:
    build:
      context: .
      dockerfile: host/Dockerfile
    environment:
      - my_name=host5a
    networks:
      subnet_5:
        ipv4_address: 172.20.5.10
    depends_on:
      - router5
    command: /bin/bash -c "ip route del default && ip route add default via 172.20.5.3 dev eth0 && python main.py"
    cap_add:
      - NET_ADMIN
  host5b:
    build:
      context: .
      dockerfile: host/Dockerfile
    environment:
      - my_name=host5b
    networks:
      subnet_5:
        ipv4_address: 172.20.5.11
    depends_on:
      - router5
    command: /bin/bash -c "ip route del default && ip route add default via 172.20.5.3 dev eth0 && python main.py"
    cap_add:
      - NET_ADMIN
networks:
  subnet_1:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.1.0/24
          gateway: 172.20.1.1
  subnet_2:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.2.0/24
          gateway: 172.20.2.1
  subnet_3:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.3.0/24
          gateway: 172.20.3.1
  subnet_4:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.4.0/24
          gateway: 172.20.4.1
  subnet_5:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.5.0/24
          gateway: 172.20.5.1